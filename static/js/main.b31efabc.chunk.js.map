{"version":3,"sources":["component/Cards/Cards.module.css","component/Cards/Cards.jsx","api/index.js","component/Chart/Chart.jsx","component/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","component/Chart/Chart.module.css","component/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b31efabc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__GQK4h\",\"card\":\"Cards_card__3i9QY\",\"infected\":\"Cards_infected__3NqpS\",\"recovered\":\"Cards_recovered__1MusQ\",\"deaths\":\"Cards_deaths__2ffOt\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from 'classnames';\r\n\r\nimport styles from \"./Cards.module.css\";\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return \"Loading\";\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n            </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={1.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\"> <CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={1.5}\r\n                            separator=\",\"\r\n                        /></Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n            </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n            </Typography>\r\n                        <Typography variant=\"h5\"> <CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={1.5}\r\n                            separator=\",\"\r\n                        /></Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths caused by COVID-19\r\n            </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n      console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {data:{countries}} = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React,{ useState,useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data: { confirmed, recovered, deaths }, country}) => {\r\n    const [dailyData,setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ? (\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill:true,\r\n                },\r\n                {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill:true,\r\n                }],\r\n            }}\r\n        /> ): null\r\n\r\n    );\r\n    // console.log(confirmed);\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered','Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],                       \r\n                        data:[confirmed.value,recovered.value,deaths.value],\r\n                }]\r\n                }}\r\n                options={{\r\n                    legend: {display : false},\r\n                    title: {display : true, text: `Current state in ${country}`},\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n\r\n        }  \r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                <option value=\"India\">India</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n        )\r\n}\r\n\r\nexport default CountryPicker;","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./component\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async(country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n\r\n  }\r\n  render() {\r\n    const { data,country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n        <Chart data={data} country={country} />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2UqJ0\",\"image\":\"App_image__2SEOA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2QokH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1UZ2a\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}